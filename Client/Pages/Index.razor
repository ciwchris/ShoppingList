@page "/"
@using ShoppingListApp.Shared 
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ShoppingListStateContainer ShoppingListStateContainer

<PageTitle>Shopping Lists</PageTitle>

<div class="w-full flex items-center justify-center font-sans">
    <div class="rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg">
        <div class="mb-4">
            <h1 class="text-2xl text-slate-500">Shopping Lists</h1>
        </div>

        @if (loading)
        {
            <div class="flex mb-4 items-center">
                <p class="w-full inline-flex text-slate-600">
                    <svg class="animate-spin inline mt-1 -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Loading…
                </p>
            </div>
        }
        else
        {
            <div class="mb-4">
                <form class="flex mt-4" @onsubmit="@(() => OnShoppingListAdd())">
                    <input
                        @bind-value="@shoppingListName"
                        placeholder="Add Shopping List"
                        class="shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker">
                    <button
                        @onclick="@(() => OnShoppingListAdd())"
                        class="flex-no-shrink p-2 border-2 rounded text-teal-400 border-teal-400 hover:text-white hover:bg-teal-400">Add</button>
                </form>
            </div>
            @foreach (var shoppingList in shoppingLists)
            {
            <div class="flex mb-4 items-center">
                <p class="w-full text-slate-500" @onclick="@(() => OnNavigateToList(@shoppingList))">@shoppingList.Name</p>
                <button
                    @onclick="@(() => OnShoppingListDelete(@shoppingList.Id))"
                    class="flex-no-shrink p-2 ml-2 border-2 rounded text-red-400 border-red-400 hover:text-white hover:bg-red-400">Remove</button>
            </div>
            }
        }
        <div class="mb-4 relative @visibility">
            <div class="absolute top-2 -right-11 h-10 w-10">
                <svg
                    @onclick="@(() => OnSaveShoppingListAsync())"
                    class="@uploadAnimation"
                    aria-hidden="true"
                    focusable="false"
                    data-icon="cloud-upload"
                    fill="currentColor"
                    viewBox="0 0 25 25"
                    role="img"
                    xmlns="http://www.w3.org/2000/svg">
                      <path fill-rule="evenodd" d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383z"/>
                      <path fill-rule="evenodd" d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3z"/>
                </svg>
            </div>
        </div>
    </div>
</div>

@code {
    // width="16" height="16" fill="currentColor" class="bi bi-cloud-upload" viewBox="0 0 16 16">
    private List<ShoppingList> shoppingLists = new();
    private bool loading = true;
    private string visibility = "invisible";
    private string uploadAnimation = string.Empty;
    private string shoppingListName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ShoppingListStateContainer.OnStateChange += StateHasChanged;
        try
        {
            shoppingLists = await Http.GetFromJsonAsync<List<ShoppingList>>("/api/ShoppingLists") ?? new();
            loading = false;
            visibility = "visible";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    public void Dispose()
    {
        ShoppingListStateContainer.OnStateChange -= StateHasChanged;
    }

    protected async Task OnShoppingListAdd()
    {
        if (string.IsNullOrWhiteSpace(shoppingListName)) return;

        try
        {
            var shoppingList = new ShoppingList
            {
                Id = Guid.NewGuid(),
                Name = shoppingListName,
                ShoppingListItems = new()
            };
            shoppingListName = string.Empty;
            shoppingLists.Add(shoppingList);
            var result = await Http.PostAsync($"api/AddShoppingList", JsonContent.Create(shoppingList));
            shoppingLists = await result.Content.ReadFromJsonAsync<List<ShoppingList>>() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    protected async Task OnShoppingListDelete(Guid id)
    {
        try
        {
            shoppingLists.Remove(shoppingLists.Single(list => list.Id == id));
            var result = await Http.DeleteAsync($"api/RemoveShoppingList/{id}");
            shoppingLists = await result.Content.ReadFromJsonAsync<List<ShoppingList>>() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task OnSaveShoppingListAsync()
    {
        try
        {
            uploadAnimation = "animate-pulse";
            await Http.GetAsync("/api/SaveShoppingLists");
            uploadAnimation = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void OnNavigateToList(ShoppingList shoppingList)
    {
        ShoppingListStateContainer.SetValue(shoppingList);
        NavigationManager.NavigateTo($"list/{shoppingList.Id}");
    }
}
