@page "/"
@using ShoppingListApp.Shared 
@implements IDisposable
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ShoppingListStateContainer ShoppingListStateContainer

<PageTitle>Lopes Shopping Lists</PageTitle>

<div class="w-full flex items-center justify-center font-sans">
    <div class="rounded shadow p-6 m-4 w-full lg:w-3/4 lg:max-w-lg">
        <div class="mb-4">
            <h1 class="text-2xl text-slate-500">Shopping Lists</h1>
        </div>

        @if (loading)
        {
            <div class="flex mb-4 items-center">
                <p class="w-full text-slate-600">Loading…</p>
            </div>
        }
        else
        {
            <div class="mb-4">
                <form class="flex mt-4" @onsubmit="@(() => OnShoppingListAdd())">
                    <input
                        @bind-value="@shoppingListName"
                        placeholder="Add Shopping List"
                        class="shadow appearance-none border rounded w-full py-2 px-3 mr-4 text-grey-darker">
                    <button
                        @onclick="@(() => OnShoppingListAdd())"
                        class="flex-no-shrink p-2 border-2 rounded text-teal-400 border-teal-400 hover:text-white hover:bg-teal-400">Add</button>
                </form>
            </div>
            @foreach (var shoppingList in shoppingLists)
            {
            <div class="flex mb-4 items-center">
                <p class="w-full text-slate-500" @onclick="@(() => OnNavigateToList(@shoppingList))">@shoppingList.Name</p>
                <button
                    @onclick="@(() => OnShoppingListDelete(@shoppingList.Id))"
                    class="flex-no-shrink p-2 ml-2 border-2 rounded text-red-400 border-red-400 hover:text-white hover:bg-red-400">Remove</button>
            </div>
            }
        }
    </div>
    <div class="relative h-32 w-32 ...">
        <div class="absolute bottom-0 right-0 h-16 w-16">
            <svg
                @onclick="@(() => OnSaveShoppingListAsync())"
                aria-hidden="true"
                focusable="false"
                data-icon="arrow-alt-left"
                fill="currentColor"
                viewBox="0 0 32 32"
                role="img"
                class="inline align-bottom w-7 h-7"
                xmlns="http://www.w3.org/2000/svg">
                <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                <g id="SVGRepo_iconCarrier">
                    <title>chevron-left</title>
                    <path d="M12.768 16l9.117-9.116c0.226-0.226 0.366-0.539 0.366-0.884 0-0.691-0.56-1.251-1.251-1.251-0.346 0-0.658 0.14-0.885 0.367v0l-9.999 10c-0.226 0.226-0.366 0.539-0.366 0.884s0.14 0.658 0.366 0.884l9.999 10.001c0.226 0.226 0.539 0.366 0.884 0.366 0.691 0 1.251-0.56 1.251-1.251 0-0.345-0.14-0.658-0.366-0.884l0 0z"></path>
                </g>
            </svg>
        </div>
    </div>
</div>

@code {
    private List<ShoppingList> shoppingLists = new();
    private bool loading = true;
    private string shoppingListName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ShoppingListStateContainer.OnStateChange += StateHasChanged;
        try
        {
            shoppingLists = await Http.GetFromJsonAsync<List<ShoppingList>>("/api/ShoppingLists") ?? new();
            loading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    public void Dispose()
    {
        ShoppingListStateContainer.OnStateChange -= StateHasChanged;
    }

    protected async Task OnShoppingListAdd()
    {
        if (string.IsNullOrWhiteSpace(shoppingListName)) return;

        try
        {
            var shoppingList = new ShoppingList
            {
                Id = Guid.NewGuid(),
                Name = shoppingListName,
                ShoppingListItems = new()
            };
            shoppingListName = string.Empty;
            shoppingLists.Add(shoppingList);
            var result = await Http.PostAsync($"api/AddShoppingList", JsonContent.Create(shoppingList));
            shoppingLists = await result.Content.ReadFromJsonAsync<List<ShoppingList>>() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    protected async Task OnShoppingListDelete(Guid id)
    {
        try
        {
            shoppingLists.Remove(shoppingLists.Single(list => list.Id == id));
            var result = await Http.DeleteAsync($"api/RemoveShoppingList/{id}");
            shoppingLists = await result.Content.ReadFromJsonAsync<List<ShoppingList>>() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task OnSaveShoppingListAsync()
    {
        try
        {
            await Http.GetFromJsonAsync<List<ShoppingList>>("/api/SaveShoppingLists");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void OnNavigateToList(ShoppingList shoppingList)
    {
        ShoppingListStateContainer.SetValue(shoppingList);
        NavigationManager.NavigateTo($"list/{shoppingList.Id}");
    }
}
